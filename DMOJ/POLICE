import java.io.*;
import java.util.*;
import java.lang.*;
import java.awt.*;
import java.awt.geom.*;
import java.math.*;
import java.text.*;
import java.math.BigInteger.*;
import java.util.Arrays; 

public class   POLICE
{
  int nums[][],nums2[][],nums4[][];
  boolean full[],nums5[][], bad[];
  int[] nums1[];
  boolean con = true;
  boolean vis[];
  int a;
  public static void main (String[] args)
  {
    new POLICE  ();
  }
  
  public int GCD(int a, int b) {
    if (b==0) return a;
    return GCD(b,a%b);
  }
  
  public int LIS(int arr[])
  {
    int n = arr.length;
    int sun[] = new int [n];
    int cur = 0;
    for(int x = 0;x<n;x++)
    {
      int temp = Arrays.binarySearch(sun,0,cur,arr[x]);
      if(temp < 0)
        temp = -temp -1;
      sun[temp] = arr[x];
      if(temp == cur)
        cur++;
    }
    return cur;
    
  }
  
  
  public boolean dfs(int node)
  {
    vis[node] = true;
    boolean good = full[node];
    for(int x = 0;x<a;x++)
    {
      if(nums5[node][x])
      {
        if(!vis[x])
          good  = good && dfs(x);
      }
    }
    return good;
  }
  
  
  
  public POLICE  ()
  {
    try
    {
      INPUT in = new INPUT (System.in);
       a = in.iscan();
      int b = in.iscan();
      bad = new boolean [a];
      nums = new int [a][b];
      nums5 = new boolean [a][a];
      nums2 = new int [a][b];
      nums4 = new int [a*b+4][2];
      full = new boolean[a];
      vis = new boolean [1007];
      for(int x = 0;x<a;x++)
       {
        for(int x1 = 0;x1<b;x1++)
        {
          nums[x][x1] = in.iscan();
          
        }
      }
      boolean same = true;
      boolean emptySpace = false;
      for(int x = 0;x<a;x++)
      {
        int temp = 0;
        for(int x1 = 0;x1<b;x1++)
        {
          nums2[x][x1] = in.iscan();
          if(nums2[x][x1] != nums[x][x1])
            same = false;
          if(nums2[x][x1] == 0)
            emptySpace = true;
          else
          {
            temp++;
            nums4[nums2[x][x1]][1] = x;
            nums4[nums2[x][x1]][0] = x1;
          }
        }
        if(temp == b)
          full[x] = true;
      }
      
     if(same)
       System.out.println(0);
     else if(!emptySpace)
       System.out.println(-1);
     else
     {
       int anss = 0;
       for(int x = 0;x<a;x++)
       {
         int size = 0;
         boolean samerow = true;
         for(int x1 = 0;x1<b;x1++)
         {
           if(nums[x][x1] != 0 && nums4[nums[x][x1]][1] == x)
           {
             size++;
           }
           else if(nums4[nums[x][x1]][1] != x && nums[x][x1] != 0)
           {
             bad[x] = true;
             anss++;
             nums5[x][nums4[nums[x][x1]][1]] = true;
             nums5[nums4[nums[x][x1]][1]][x] = true;
           }
           if(nums[x][x1] != nums2[x][x1])
             samerow = false;
         }
         int nums3[] = new int [size];
         int point = 0;
         for(int x1 = 0;x1<b;x1++)
         {
           if(nums[x][x1] != 0 && nums4[nums[x][x1]][1] == x)
           {
             nums3[point] = nums4[nums[x][x1]][0];
             point++;
           }
         }
         anss += (size - LIS(nums3));
         if(size == b && !samerow)
           anss++;

       }
       for(int x = 0;x<a;x++)
       {
         if(!vis[x] && bad[x] && full[x])
         {
           if(dfs(x))
             anss++;
         }
       }
       System.out.println(anss);
     }
    }
    catch(IOException e)
    {

    }
  }
  
  
 private static class INPUT {

  private InputStream stream;
  private byte[] buf = new byte[1024];
  private int curChar, numChars;

  public INPUT (InputStream stream) {
   this.stream = stream;
  }

  public INPUT (String file) throws IOException {
   this.stream = new FileInputStream (file);
  }

  public int cscan () throws IOException {
   if (curChar >= numChars) {
    curChar = 0;
    numChars = stream.read (buf);
   }
   
   if (numChars == -1)
    return numChars;

   return buf[curChar++];
  }

  public int iscan () throws IOException {
   int c = cscan (), sgn = 1;
   
   while (space (c))
    c = cscan ();

   if (c == '-') {
    sgn = -1;
    c = cscan ();
   }

   int res = 0;

   do {
    res = (res << 1) + (res << 3);
    res += c - '0';
    c = cscan ();
   }
   while (!space (c));

   return res * sgn;
  }

  public String sscan () throws IOException {
   int c = cscan ();
   
   while (space (c))
    c = cscan ();

   StringBuilder res = new StringBuilder ();

   do {
    res.appendCodePoint (c);
    c = cscan ();
   }
   while (!space (c));

   return res.toString ();
  }

  public double dscan () throws IOException {
   int c = cscan (), sgn = 1;
   
   while (space (c))
    c = cscan ();

   if (c == '-') {
    sgn = -1;
    c = cscan ();
   }

   double res = 0;

   while (!space (c) && c != '.') {
    if (c == 'e' || c == 'E')
     return res * UTILITIES.fast_pow (10, iscan ());
    
    res *= 10;
    res += c - '0';
    c = cscan ();
   }

   if (c == '.') {
    c = cscan ();
    double m = 1;

    while (!space (c)) {
     if (c == 'e' || c == 'E')
      return res * UTILITIES.fast_pow (10, iscan ());

     m /= 10;
     res += (c - '0') * m;
     c = cscan ();
    }
   }

   return res * sgn;
  }

  public long lscan () throws IOException {
   int c = cscan (), sgn = 1;
   
   while (space (c))
    c = cscan ();

   if (c == '-') {
    sgn = -1;
    c = cscan ();
   }

   long res = 0;

   do {
    res = (res << 1) + (res << 3);
    res += c - '0';
    c = cscan ();
   }
   while (!space (c));

   return res * sgn;
  }

  public boolean space (int c) {
   return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
  }
 }

 public static class UTILITIES {

  static final double EPS = 10e-6;

  public static int lower_bound (int[] arr, int x) {
   int low = 0, high = arr.length, mid = -1;

   while (low < high) {
    mid = (low + high) / 2;

    if (arr[mid] >= x)
     high = mid;
    else
     low = mid + 1;
   }

   return low;
  }

  public static int upper_bound (int[] arr, int x) {
   int low = 0, high = arr.length, mid = -1;

   while (low < high) {
    mid = (low + high) / 2;

    if (arr[mid] > x)
     high = mid;
    else
     low = mid + 1;
   }

   return low;
  }

  public static int gcd (int a, int b) {
   return b == 0 ? a : gcd (b, a % b);
  }

  public static int lcm (int a, int b) {
   return a * b / gcd (a, b);
  }

  public static int fast_pow_mod (int b, int x, int mod) {
   if (x == 0) return 1;
   if (x == 1) return b;
   if (x % 2 == 0) return fast_pow_mod (b * b % mod, x / 2, mod) % mod;

   return b * fast_pow_mod (b * b % mod, x / 2, mod) % mod;
  }

  public static int fast_pow (int b, int x) {
   if (x == 0) return 1;
   if (x == 1) return b;
   if (x % 2 == 0) return fast_pow (b * b, x / 2);

   return b * fast_pow (b * b, x / 2);
  }

  public static long choose (long n, long k) {
   k = Math.min (k, n - k);
   long val = 1;

   for (int i = 0; i < k; ++i)
    val = val * (n - i) / (i + 1);

   return val;
  }

  public static long permute (int n, int k) {
   if (n < k) return 0;
   long val = 1;

   for (int i = 0; i < k; ++i)
    val = (val * (n - i));

   return val;
  }
 }
}
